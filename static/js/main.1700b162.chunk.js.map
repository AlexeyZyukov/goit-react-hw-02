{"version":3,"sources":["components/Section/section.module.css","components/feedback.module.css","logo.svg","bugFinder.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/notification.js","components/Statistics/Statistics.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","style","whiteSpace","toString","componentStack","children","React","Component","Section","title","className","styles","section","FeedbackOptions","arrayFromState","onClickFn","map","item","type","name","onClick","string","charAt","toUpperCase","slice","toLowerCase","Notification","message","statistic","Statistics","totalFeedback","positiveFeedback","arrayFromStateEntry","statistics","table","row","Feedback","onBtnClick","event","prevState","target","currentTarget","dir","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","good","total","Math","round","neutral","bad","wrapper","keys","entries","PropsTypes","PropTypes","number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1700b162.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__xQV_z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"feedback_wrapper__1rL0t\",\"statistics\":\"feedback_statistics__26LhS\",\"statsItem\":\"feedback_statsItem__VdnWp\",\"table\":\"feedback_table__285Yr\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n// import { Component } from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n    // You can also log error messages to an error reporting service here\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import PropTypes from 'prop-types';\nimport styles from './section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section className={styles.section}>\n      {title && <h2>{title}</h2>}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import React from 'react';\nimport styles from '../feedback.module.css';\n\nconst uppCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\nconst FeedbackOptions = ({ arrayFromState, onClickFn }) => (\n  <div>\n    {arrayFromState.map(item => (\n      <button\n        type=\"button\"\n        className={item}\n        name={item}\n        key={item}\n        onClick={onClickFn}\n      >\n        {uppCase(item)}\n      </button>\n    ))}\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../feedback.module.css';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p className={styles.statistic}>{message}</p>\n    </>\n  );\n};\nNotification.propTypes = {\n  message: PropTypes.string,\n};\nexport default Notification;\n","import React from 'react';\nimport { Fragment } from 'react';\nimport Notification from '../Notification/notification';\nimport styles from '../feedback.module.css';\n\nconst uppCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\nconst Statistics = ({\n  totalFeedback,\n  positiveFeedback,\n  arrayFromStateEntry,\n  message,\n}) => {\n  return (\n    <div>\n      {totalFeedback !== 0 ? (\n        <Fragment>\n          <div className={styles.statistics}>\n            {arrayFromStateEntry.map(item => (\n              <Fragment key={item[0]}>\n                <tbody className={styles.table}>\n                  <tr className={styles.row}>\n                    <td>{uppCase(item[0])}: </td>\n                    <td>{item[1]}</td>\n                  </tr>\n                </tbody>\n              </Fragment>\n            ))}\n            <tbody className={styles.table}>\n              <tr>\n                <td>Total: </td>\n                <td>{totalFeedback}</td>\n              </tr>\n              <tr>\n                <td>Positive feedback: </td>\n                <td>{positiveFeedback} %</td>\n              </tr>\n            </tbody>\n          </div>\n        </Fragment>\n      ) : (\n        <Notification message={message} />\n      )}\n    </div>\n  );\n};\nexport default Statistics;\n\n// eslint-disable-next-line no-lone-blocks\n{\n  /* <li className={styles.statsItem}>\n                  <span className={styles.statsKind}>{item[0]}: </span>\n                  <span className={styles.statsValue}>{item[1]}</span>\n                </li> */\n}\n// eslint-disable-next-line no-lone-blocks\n{\n  /* <ul>\n              <li>\n                <span>Total: </span>\n                <span>{totalFeedback}</span>\n              </li>\n              <li>\n                <span>Positive feedback: </span>\n                <span>\n                  {positiveFeedback}\n                  <span> %</span>\n                </span>\n              </li>\n            </ul> */\n}\n","/* eslint-disable no-unused-expressions */\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Component } from 'react';\nimport Section from '../Section/Section';\n\nimport styles from '../feedback.module.css';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\n\nclass Feedback extends Component {\n  static PropsTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  onBtnClick = event => {\n    this.setState(prevState => {\n      return {\n        //event.currentTarget.name, где name={item} в разметке кнопки FeedbackOptions\n        [event.target.name]: prevState[event.target.name] + 1,\n      };\n    });\n    console.log(`${event.target.name}: `, this.state[event.currentTarget.name]);\n    console.dir(event.target.name);\n  };\n\n  countTotalFeedback = () => {\n    console.log('Object.values(this.state): ', Object.values(this.state));\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className={styles.wrapper}>\n          <Section title=\"Please leave feedback\">\n            <FeedbackOptions\n              arrayFromState={Object.keys(this.state)}\n              onClickFn={this.onBtnClick}\n            />\n          </Section>\n\n          <Section title=\"Statistics\">\n            <Statistics\n              totalFeedback={this.countTotalFeedback()}\n              positiveFeedback={this.countPositiveFeedbackPercentage()}\n              arrayFromStateEntry={Object.entries(this.state)}\n              message=\"There is no feedback\"\n            />\n          </Section>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Feedback;\n\n// eslint-disable-next-line no-lone-blocks\n{\n  /* {total !== 0 ? (\n          <Fragment>\n            <ul>\n              {arrayState.map(item => (\n                <Fragment key={item}>\n                  <li className={styles.statsItem}>\n                    <span className={styles.statsKind}>{item}: </span>\n                    <span className={styles.statsValue}>{this.state[item]}</span>\n                  </li>\n                </Fragment>\n              ))}\n              <ul>\n                <li>\n                  <span>Total: </span>\n                  <span>{total}</span>\n                </li>\n                <li>\n                  <span>Positive feedback: </span>\n                  <span>\n                    {this.countPositiveFeedbackPercentage()}\n                    <span> %</span>\n                  </span>\n                </li>\n              </ul>\n            </ul>\n          </Fragment>\n        ) : (\n          `There is no feedback`\n        )} */\n}\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport ErrorBoundary from './bugFinder';\nimport Feedback from './components/Feedback/Feedback';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <div className=\"App\">\n        <Feedback title=\"Statistics\" />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}