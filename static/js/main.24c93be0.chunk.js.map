{"version":3,"sources":["feedback/Section/section.module.css","feedback/feedback.module.css","logo.svg","bugFinder.js","feedback/Section/Section.js","feedback/FeedbackOptions/FeedbackOptions.js","feedback/Notification/notification.js","feedback/Statistics/Statistics.js","feedback/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","style","whiteSpace","toString","componentStack","children","React","Component","Section","title","className","styles","section","FeedbackOptions","arrayFromState","onClickFn","map","item","type","onClick","Notification","message","statistic","Statistics","totalFeedback","positiveFeedback","arrayFromStateEntry","statistics","table","row","Feedback","onBtnClick","event","prevState","target","textContent","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","good","total","Math","round","neutral","bad","wrapper","keys","entries","PropsTypes","PropTypes","number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24c93be0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__2hZ2E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"feedback_wrapper__3yYvx\",\"statistics\":\"feedback_statistics__1YQXX\",\"statsItem\":\"feedback_statsItem__B7j4g\",\"table\":\"feedback_table__2Qyao\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n// import { Component } from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n    // You can also log error messages to an error reporting service here\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './section.module.css';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section className={styles.section}>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport styles from '../feedback.module.css';\r\n\r\nconst FeedbackOptions = ({ arrayFromState, onClickFn }) => (\r\n  <div>\r\n    {arrayFromState.map(item => (\r\n      <button type=\"button\" className={item} key={item} onClick={onClickFn}>\r\n        {item}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../feedback.module.css';\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.statistic}>{message}</p>\r\n    </>\r\n  );\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\nexport default Notification;\r\n","import React from 'react';\r\nimport { Fragment } from 'react';\r\nimport Notification from '../Notification/notification';\r\nimport styles from '../feedback.module.css';\r\n\r\nconst Statistics = ({\r\n  totalFeedback,\r\n  positiveFeedback,\r\n  arrayFromStateEntry,\r\n  message,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {totalFeedback !== 0 ? (\r\n        <Fragment>\r\n          <ul className={styles.statistics}>\r\n            {arrayFromStateEntry.map(item => (\r\n              <Fragment key={item[0]}>\r\n                <tbody className={styles.table}>\r\n                  <tr className={styles.row}>\r\n                    <td>{item[0]}: </td>\r\n                    <td>{item[1]}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Fragment>\r\n            ))}\r\n            <tbody className={styles.table}>\r\n              <tr>\r\n                <td>Total: </td>\r\n                <td>{totalFeedback}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Positive feedback: </td>\r\n                <td>{positiveFeedback} %</td>\r\n              </tr>\r\n            </tbody>\r\n          </ul>\r\n        </Fragment>\r\n      ) : (\r\n        <Notification message={message} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Statistics;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{\r\n  /* <li className={styles.statsItem}>\r\n                  <span className={styles.statsKind}>{item[0]}: </span>\r\n                  <span className={styles.statsValue}>{item[1]}</span>\r\n                </li> */\r\n}\r\n// eslint-disable-next-line no-lone-blocks\r\n{\r\n  /* <ul>\r\n              <li>\r\n                <span>Total: </span>\r\n                <span>{totalFeedback}</span>\r\n              </li>\r\n              <li>\r\n                <span>Positive feedback: </span>\r\n                <span>\r\n                  {positiveFeedback}\r\n                  <span> %</span>\r\n                </span>\r\n              </li>\r\n            </ul> */\r\n}\r\n","/* eslint-disable no-unused-expressions */\r\nimport PropTypes from 'prop-types';\r\nimport { Fragment } from 'react';\r\nimport { Component } from 'react';\r\nimport Section from '../Section/Section';\r\n\r\nimport styles from '../feedback.module.css';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\n\r\nclass Feedback extends Component {\r\n  static PropsTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n  }\r\n\r\n  onBtnClick = event => {\r\n    this.setState(prevState => {\r\n      return {\r\n        [event.target.textContent]: prevState[event.target.textContent] + 1,\r\n      };\r\n    });\r\n    console.log(\r\n      `${event.target.textContent}`,\r\n      this.state[event.target.textContent],\r\n    );\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    console.log('Object.values(this.state): ', Object.values(this.state));\r\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    return total ? Math.round((good / total) * 100) : 0;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className={styles.wrapper}>\r\n          <Section title=\"Please leave feedback\">\r\n            <FeedbackOptions\r\n              arrayFromState={Object.keys(this.state)}\r\n              onClickFn={this.onBtnClick}\r\n            />\r\n          </Section>\r\n\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n              totalFeedback={this.countTotalFeedback()}\r\n              positiveFeedback={this.countPositiveFeedbackPercentage()}\r\n              arrayFromStateEntry={Object.entries(this.state)}\r\n              message=\"There is no feedback\"\r\n            />\r\n          </Section>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{\r\n  /* {total !== 0 ? (\r\n          <Fragment>\r\n            <ul>\r\n              {arrayState.map(item => (\r\n                <Fragment key={item}>\r\n                  <li className={styles.statsItem}>\r\n                    <span className={styles.statsKind}>{item}: </span>\r\n                    <span className={styles.statsValue}>{this.state[item]}</span>\r\n                  </li>\r\n                </Fragment>\r\n              ))}\r\n              <ul>\r\n                <li>\r\n                  <span>Total: </span>\r\n                  <span>{total}</span>\r\n                </li>\r\n                <li>\r\n                  <span>Positive feedback: </span>\r\n                  <span>\r\n                    {this.countPositiveFeedbackPercentage()}\r\n                    <span> %</span>\r\n                  </span>\r\n                </li>\r\n              </ul>\r\n            </ul>\r\n          </Fragment>\r\n        ) : (\r\n          `There is no feedback`\r\n        )} */\r\n}\r\n","import logo from './logo.svg';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n\r\nimport ErrorBoundary from './bugFinder';\r\nimport Feedback from './feedback/Feedback/Feedback';\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <div className=\"App\">\r\n        <Feedback title=\"Statistics\" />\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}