{"version":3,"sources":["logo.svg","bugFinder.js","feedback/FeedbackOptions.js","feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","style","whiteSpace","toString","componentStack","children","React","Component","FeedbackOptions","arrayFromState","onClickFn","map","item","type","onClick","className","Feedback","onBtnClick","event","prevState","target","textContent","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","good","total","Math","round","neutral","bad","arrayState","keys","title","styles","statsItem","statsKind","statsValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,wCCsCAA,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,KAAMC,UAAW,MAFtB,E,qDAKnB,SAAkBD,EAAOC,GAEvBC,KAAKC,SAAS,CACZH,MAAOA,EACPC,UAAWA,IAGbG,QAAQC,IAAIH,KAAKH,S,oBAGnB,WACE,OAAIG,KAAKH,MAAME,UAGX,gCACE,uDACA,0BAASK,MAAO,CAAEC,WAAY,YAA9B,UACGL,KAAKH,MAAMC,OAASE,KAAKH,MAAMC,MAAMQ,WACtC,uBACCN,KAAKH,MAAME,UAAUQ,qBAMvBP,KAAKJ,MAAMY,a,GA/BMC,IAAMC,W,uBCUnBC,EAVS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,UAEtCD,EAAeE,KAAI,SAAAC,GAAI,OACtB,wBAAQC,KAAK,SAAoBC,QAASJ,EAAWK,UAAWH,EAAhE,SACGA,GADwBA,OC4GlBI,E,kDAlGb,aAAe,IAAD,8BACZ,gBAQFC,WAAa,SAAAC,GACX,EAAKpB,UAAS,SAAAqB,GACZ,OAAO,eACJD,EAAME,OAAOC,YAAcF,EAAUD,EAAME,OAAOC,aAAe,MAGtEtB,QAAQC,IAAR,UACKkB,EAAME,OAAOC,aAChB,EAAK3B,MAAMwB,EAAME,OAAOC,eAjBd,EAqBdC,mBAAqB,WAEnB,OADAvB,QAAQC,IAAI,8BAA+BuB,OAAOC,OAAO,EAAK9B,QACvD6B,OAAOC,OAAO,EAAK9B,OAAO+B,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,IAvBzD,EA2BdC,gCAAkC,WAChC,IAAQC,EAAS,EAAKnC,MAAdmC,KACFC,EAAQ,EAAKR,qBACnB,OAAOQ,EAAQC,KAAKC,MAAOH,EAAOC,EAAS,KAAO,GA5BlD,EAAKpC,MAAQ,CACXmC,KAAM,EACNI,QAAS,EACTC,IAAK,GALK,E,0CAmCd,WACE,IAAMC,EAAaZ,OAAOa,KAAKvC,KAAKH,OAC9BoC,EAAQjC,KAAKyB,qBAGnB,OAFAvB,QAAQC,IAAI,eAAgBmC,GAG1B,eAAC,WAAD,WACGtC,KAAKJ,MAAM4C,OAAS,6BAAKxC,KAAKJ,MAAM4C,QAErC,cAAC,EAAD,CACE5B,eAAgB0B,EAChBzB,UAAWb,KAAKoB,aAkBP,IAAVa,EACC,cAAC,WAAD,UACE,+BACGK,EAAWxB,KAAI,SAAAC,GAAI,OAClB,cAAC,WAAD,UACE,qBAAIG,UAAWuB,IAAOC,UAAtB,UACE,uBAAMxB,UAAWuB,IAAOE,UAAxB,UAAoC5B,EAApC,QACA,sBAAMG,UAAWuB,IAAOG,WAAxB,SAAqC,CAAC7B,SAH3BA,MAOjB,+BACE,+BACE,2CACA,+BAAOkB,OAET,+BACE,uDACA,iCACGjC,KAAK+B,kCACN,oDApBX,8B,GAvEcrB,aCWRmC,MAbf,WACE,OACE,cAAC,EAAD,UACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,EAAD,CAAUsB,MAAM,oBCCTM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2af296f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n// import { Component } from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n    console.log(this.state);\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport styles from './feedback.module.css';\n\nconst FeedbackOptions = ({ arrayFromState, onClickFn }) => {\n  <div>\n    {arrayFromState.map(item => (\n      <button type=\"button\" key={item} onClick={onClickFn} className={item}>\n        {item}\n      </button>\n    ))}\n  </div>;\n};\n\nexport default FeedbackOptions;\n","/* eslint-disable no-unused-expressions */\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Component } from 'react';\n\nimport styles from './feedback.module.css';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\n\nclass Feedback extends Component {\n  // static defaultProps = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  // };\n\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  onBtnClick = event => {\n    this.setState(prevState => {\n      return {\n        [event.target.textContent]: prevState[event.target.textContent] + 1,\n      };\n    });\n    console.log(\n      `${event.target.textContent}`,\n      this.state[event.target.textContent],\n    );\n  };\n\n  countTotalFeedback = () => {\n    console.log('Object.values(this.state): ', Object.values(this.state));\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n    // const { good, neutral, bad } = this.state;\n    // return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  // arrayState = Object.keys(this.state);\n\n  render() {\n    const arrayState = Object.keys(this.state);\n    const total = this.countTotalFeedback();\n    console.log('arrayState: ', arrayState);\n\n    return (\n      <Fragment>\n        {this.props.title && <h2>{this.props.title}</h2>}\n\n        <FeedbackOptions\n          arrayFromState={arrayState}\n          onClickFn={this.onBtnClick}\n        />\n\n        {/* <div>\n            {Object.keys(this.state).map(item => (\n              <button type=\"button\" key={item}\n                onClick={this.onBtnClick} className={item}>\n                {item}\n              </button>\n            ))}\n        </div> */}\n\n        {/* <Statistics\n          totalFeedback={this.countTotalFeedback()}\n          positiveFeedback={this.countPositiveFeedbackPercentage}\n          arrayFrmState={this.arrayState}\n        /> */}\n\n        {total !== 0 ? (\n          <Fragment>\n            <ul>\n              {arrayState.map(item => (\n                <Fragment key={item}>\n                  <li className={styles.statsItem}>\n                    <span className={styles.statsKind}>{item}: </span>\n                    <span className={styles.statsValue}>{[item]}</span>\n                  </li>\n                </Fragment>\n              ))}\n              <ul>\n                <li>\n                  <span>Total: </span>\n                  <span>{total}</span>\n                </li>\n                <li>\n                  <span>Positive feedback: </span>\n                  <span>\n                    {this.countPositiveFeedbackPercentage()}\n                    <span> %</span>\n                  </span>\n                </li>\n              </ul>\n            </ul>\n          </Fragment>\n        ) : (\n          `There is no feedback`\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Feedback;\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport ErrorBoundary from './bugFinder';\nimport Feedback from './feedback/Feedback.js';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <div className=\"App\">\n        <Feedback title=\"Statistics\" />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}