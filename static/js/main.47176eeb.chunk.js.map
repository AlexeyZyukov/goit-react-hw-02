{"version":3,"sources":["logo.svg","feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["CONFIG_DATA","key","Feedback","props","totalCount","onBtnClick","event","setState","target","textContent","state","console","log","countTotalFeedback","Good","Neutral","Bad","countPositivePercentage","Math","round","this","title","map","item","onClick","className","styles","statsList","statsItem","statsKind","statsValue","Component","dir","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,+DCOTA,EAAc,CAClB,CACEC,IAAK,QAEP,CACEA,IAAK,WAEP,CACEA,IAAK,QAIHC,E,kDAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,WAAa,GAbM,EAenBC,WAAa,SAAAC,GACX,EAAKC,SAAL,eACGD,EAAME,OAAOC,YAAc,EAAKC,MAAMJ,EAAME,OAAOC,aAAe,IAErEE,QAAQC,IAAR,UACKN,EAAME,OAAOC,aAChB,EAAKC,MAAMJ,EAAME,OAAOC,cAE1BE,QAAQC,IAAI,UAAW,EAAKR,aAvBX,EAkCnBS,mBAAqB,WACnB,MAA+B,EAAKH,MAA5BI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OADA,EAAKZ,WAAaU,EAAOC,EAAUC,EAC5B,EAAKZ,YArCK,EAuCnBa,wBAA0B,WACxB,IAAQH,EAAS,EAAKJ,MAAdI,KAER,OAD2BI,KAAKC,MAAOL,EAAO,EAAKV,WAAc,MAnCjE,EAAKM,MAAQ,CACXI,KAAM,EACNC,QAAS,EACTC,IAAK,GATU,E,0CA6CnB,WAAU,IAAD,OACP,OACE,eAAC,WAAD,WACE,gCACGI,KAAKjB,MAAMkB,OAAS,6BAAKD,KAAKjB,MAAMkB,QACpCrB,EAAYsB,KAAI,SAAAC,GAAI,OACnB,wBAAuBC,QAAS,EAAKnB,WAArC,SACGkB,EAAKtB,KADKsB,EAAKtB,WAKrBmB,KAAKV,MAAMI,MAAQM,KAAKV,MAAMK,SAAWK,KAAKV,MAAMM,IACnD,cAAC,WAAD,UACE,gCACGhB,EAAYsB,KAAI,SAAAC,GAAI,OACnB,oBAAmBE,UAAWC,IAAOC,UAArC,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,uBAAMH,UAAWC,IAAOG,UAAxB,UAAoCN,EAAKtB,IAAzC,QACA,sBAAMwB,UAAWC,IAAOI,WAAxB,SACG,EAAKpB,MAAMa,EAAKtB,WAJdsB,EAAKtB,QAShB,+BACE,+BACE,2CACA,+BAAOmB,KAAKP,0BAEd,+BACE,8CACA,iCACGO,KAAKH,0BACN,oDAtBX,8B,GA/Dcc,aAmGvBpB,QAAQqB,IAAI9B,GAcGA,QCnHA+B,MAXf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,CAAUJ,MAAM,kBCGPa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.47176eeb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-unused-expressions */\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Component } from 'react';\n\nimport styles from './feedback.module.css';\n\nconst CONFIG_DATA = [\n  {\n    key: 'Good',\n  },\n  {\n    key: 'Neutral',\n  },\n  {\n    key: 'Bad',\n  },\n];\n\nclass Feedback extends Component {\n  // static defaultProps = {\n  //   Good: 0,\n  //   Neutral: 0,\n  //   Bad: 0,\n  // };\n\n  constructor(props) {\n    super(props);\n    // this.state = {};\n    // CONFIG_DATA.forEach(item => {\n    //   this.state[item.key] = 0;\n    // }); //динамическое формирование state из массива данных CONFIG. Может быть использовано в дальнейшем. Позволяет динамически добавлять данные в state.\n    this.state = {\n      Good: 0,\n      Neutral: 0,\n      Bad: 0,\n    };\n  }\n\n  totalCount = '';\n\n  onBtnClick = event => {\n    this.setState({\n      [event.target.textContent]: this.state[event.target.textContent] + 1,\n    });\n    console.log(\n      `${event.target.textContent}`,\n      this.state[event.target.textContent],\n    );\n    console.log('total: ', this.totalCount);\n    // console.log('event.currentTarget: ', event.currentTarget);\n    // console.log('event.currentTarget.textContent: ', tagretName);\n  };\n  // onGoodBtnClick = () => { //prevState - учитывает предыдущее значение аргумента. Учитывает асинхронность метода setState\n  //   this.setState(prevState => {\n  //     return ({ value: prevState.value + 1 });\n  //   })\n  //   console.log('value: ', this.state.value)\n  // }\n\n  countTotalFeedback = () => {\n    const { Good, Neutral, Bad } = this.state;\n    this.totalCount = Good + Neutral + Bad;\n    return this.totalCount;\n  };\n  countPositivePercentage = () => {\n    const { Good } = this.state;\n    const positivePercentage = Math.round((Good / this.totalCount) * 100);\n    return positivePercentage;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div>\n          {this.props.title && <h2>{this.props.title}</h2>}\n          {CONFIG_DATA.map(item => (\n            <button key={item.key} onClick={this.onBtnClick}>\n              {item.key}\n            </button>\n          ))}\n        </div>\n        {this.state.Good || this.state.Neutral || this.state.Bad ? (\n          <Fragment>\n            <div>\n              {CONFIG_DATA.map(item => (\n                <ul key={item.key} className={styles.statsList}>\n                  <li className={styles.statsItem}>\n                    <span className={styles.statsKind}>{item.key}: </span>\n                    <span className={styles.statsValue}>\n                      {this.state[item.key]}\n                    </span>\n                  </li>\n                </ul>\n              ))}\n              <ul>\n                <li>\n                  <span>Total: </span>\n                  <span>{this.countTotalFeedback()}</span>\n                </li>\n                <li>\n                  <span>Positive: </span>\n                  <span>\n                    {this.countPositivePercentage()}\n                    <span> %</span>\n                  </span>\n                </li>\n              </ul>\n            </div>\n          </Fragment>\n        ) : (\n          `There is no feedback`\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconsole.dir(Feedback);\n\n// function Statistics(props) {\n//   const { id, kind, value } = props;\n//   return (\n//     <ul className={styles.statList} key={id}>\n//       <li className={styles.statItem}>\n//         <span className={styles.statKind}>{kind}</span>\n//         <span className={styles.statValue}>{value}</span>\n//       </li>\n//     </ul>\n//   );\n// }\n\nexport default Feedback;\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport Feedback from './feedback/Feedback.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback title=\"Statistics\" />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}