{"version":3,"sources":["logo.svg","feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["CONFIG_DATA","key","Feedback","props","totalCount","onBtnClick","event","setState","target","textContent","state","countTotalFeedback","Good","Neutral","Bad","countPositivePercentage","positivePercentage","Math","round","console","log","this","title","onClick","map","item","className","styles","statsList","statsItem","statskind","statsvalue","Component","dir","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,+DCKTA,EAAc,CAClB,CACEC,IAAK,QAEP,CACEA,IAAK,WAEP,CACEA,IAAK,QAIHC,E,kDAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,WAAa,EAbM,EAenBC,WAAa,SAAAC,GAIX,EAAKC,SAAL,eACGD,EAAME,OAAOC,YAAc,EAAKC,MAAMJ,EAAME,OAAOC,aAAe,KApBpD,EAgCnBE,mBAAqB,WACnB,MAA+B,EAAKD,MAA5BE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OADA,EAAKV,WAAaQ,EAAOC,EAAUC,EAC5B,EAAKV,YAnCK,EAqCnBW,wBAA0B,WACxB,IAAMC,EAC4C,IAAhDC,KAAKC,MAAM,EAAKR,MAAME,KAAO,EAAKR,YAEpC,OADAe,QAAQC,IAAI,EAAKV,MAAME,MAChBI,GAnCP,EAAKN,MAAQ,CACXE,KAAM,EACNC,QAAS,EACTC,IAAK,GATU,E,0CA4CnB,WAAU,IAAD,OACP,OACE,qCACE,gCACGO,KAAKlB,MAAMmB,OAAS,6BAAKD,KAAKlB,MAAMmB,QACrC,wBAAQC,QAASF,KAAKhB,WAAtB,kBAIA,wBAAQkB,QAASF,KAAKhB,WAAtB,qBACA,wBAAQkB,QAASF,KAAKhB,WAAtB,oBAEF,gCACGL,EAAYwB,KAAI,SAAAC,GAAI,OACnB,oBAAIC,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,uBAAMH,UAAWC,IAAOG,UAAxB,UAAoCL,EAAKxB,IAAzC,QACA,sBAAMyB,UAAWC,IAAOI,WAAxB,SACG,EAAKrB,MAAMe,EAAKxB,eAkBzB,+BACE,+BACE,2CACA,+BAAOoB,KAAKV,0BAEd,+BACE,8CACA,iCACGU,KAAKN,0BACN,yD,GAhGOiB,aA0GvBb,QAAQc,IAAI/B,GAcGA,QCxHAgC,MAXf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,CAAUJ,MAAM,kBCGPa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.652c680c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import PropTypes from 'prop-types';\nimport { Component } from 'react';\n\nimport styles from './feedback.module.css';\n\nconst CONFIG_DATA = [\n  {\n    key: 'Good',\n  },\n  {\n    key: 'Neutral',\n  },\n  {\n    key: 'Bad',\n  },\n];\n\nclass Feedback extends Component {\n  // static defaultProps = {\n  //   Good: 0,\n  //   Neutral: 0,\n  //   Bad: 0,\n  // };\n\n  constructor(props) {\n    super(props);\n    // this.state = {}; //динамическое формирование state из массива данных CONFIG. Может быть использовано в дальнейшем.\n    // CONFIG_DATA.forEach(item => {\n    //   this.state[item.key] = 0;\n    // });\n    this.state = {\n      Good: 0,\n      Neutral: 0,\n      Bad: 0,\n    };\n  }\n\n  totalCount = 0;\n\n  onBtnClick = event => {\n    // console.dir(event.target);\n    // console.log(event.target.textContent);\n    // console.log(Object.keys(this.state)[0]);\n    this.setState({\n      [event.target.textContent]: this.state[event.target.textContent] + 1,\n    });\n    // console.log('event.currentTarget: ', event.currentTarget);\n    // console.log('event.currentTarget.textContent: ', tagretName);\n  };\n  // onGoodBtnClick = () => { //prevState - учитывает предыдущее значение аргумента. Учитывает асинхронность метода setState\n  //   this.setState(prevState => {\n  //     return ({ value: prevState.value + 1 });\n  //   })\n  //   console.log('value: ', this.state.value)\n  // }\n\n  countTotalFeedback = () => {\n    const { Good, Neutral, Bad } = this.state;\n    this.totalCount = Good + Neutral + Bad;\n    return this.totalCount;\n  };\n  countPositivePercentage = () => {\n    const positivePercentage =\n      Math.round(this.state.Good / this.totalCount) * 100;\n    console.log(this.state.Good);\n    return positivePercentage;\n  };\n\n  render() {\n    return (\n      <>\n        <div>\n          {this.props.title && <h2>{this.props.title}</h2>}\n          <button onClick={this.onBtnClick}>Good</button>\n          {/* <button onClick={this.onBtnClick}>\n            {Object.keys(this.state)[0]}\n          </button> */}\n          <button onClick={this.onBtnClick}>Neutral</button>\n          <button onClick={this.onBtnClick}>Bad</button>\n        </div>\n        <div>\n          {CONFIG_DATA.map(item => (\n            <ul className={styles.statsList}>\n              <li className={styles.statsItem}>\n                <span className={styles.statskind}>{item.key}: </span>\n                <span className={styles.statsvalue}>\n                  {this.state[item.key]}\n                </span>\n              </li>\n            </ul>\n          ))}\n\n          {/* <ul className={styles.statsList}>\n            <li className={styles.statsItem}>\n              <span className={styles.statskind}>Neutral: </span>\n              <span className={styles.statsvalue}>{this.state.Neutral}</span>\n            </li>\n          </ul>\n          <ul className={styles.statsList}>\n            <li className={styles.statsItem}>\n              <span className={styles.statskind}>Bad: </span>\n              <span className={styles.statsvalue}>{this.state.Bad}</span>\n            </li>\n          </ul> */}\n          <ul>\n            <li>\n              <span>Total: </span>\n              <span>{this.countTotalFeedback()}</span>\n            </li>\n            <li>\n              <span>Positive: </span>\n              <span>\n                {this.countPositivePercentage()}\n                <span> %</span>\n              </span>\n            </li>\n          </ul>\n        </div>\n      </>\n    );\n  }\n}\n\nconsole.dir(Feedback);\n\n// function Statistics(props) {\n//   const { id, kind, value } = props;\n//   return (\n//     <ul className={styles.statList} key={id}>\n//       <li className={styles.statItem}>\n//         <span className={styles.statKind}>{kind}</span>\n//         <span className={styles.statValue}>{value}</span>\n//       </li>\n//     </ul>\n//   );\n// }\n\nexport default Feedback;\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport Feedback from './feedback/Feedback.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback title=\"Statistics\" />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}