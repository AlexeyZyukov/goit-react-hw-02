{"version":3,"sources":["logo.svg","Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Feedback","onGoodBtnClick","setState","Good","state","onNeutralBtnClick","Neutral","console","log","onBadBtnClick","Bad","countTotalFeedback","count","this","props","title","onClick","className","styles","statsList","statsItem","statskind","statsvalue","Gkey","Nkey","Bkey","Component","defaultProps","dir","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,I,wDCITA,E,kDAOJ,aAAe,IAAD,8BACZ,gBAQFC,eAAiB,WACf,EAAKC,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,KAV5B,EAmBdE,kBAAoB,WAClB,EAAKH,SAAS,CAAEI,QAAS,EAAKF,MAAME,QAAU,IAC9CC,QAAQC,IAAI,EAAKJ,MAAME,UArBX,EAuBdG,cAAgB,WACd,EAAKP,SAAS,CAAEQ,IAAK,EAAKN,MAAMM,IAAM,KAxB1B,EA2BdC,mBAAqB,WAInB,MAHmB,CACjBC,MAAO,EAAKR,MAAMD,KAAO,EAAKC,MAAME,QAAU,EAAKF,MAAMM,KAEzCE,OA7BlB,EAAKR,MAAQ,CACXD,KAAM,EACNG,QAAS,EACTI,IAAK,GALK,E,0CAsCd,WACE,OACE,qCACE,gCACE,6BAAKG,KAAKC,MAAMC,QAChB,wBAAQC,QAASH,KAAKZ,eAAtB,kBACA,wBAAQe,QAASH,KAAKR,kBAAtB,qBACA,wBAAQW,QAASH,KAAKJ,cAAtB,oBAEF,oBAAIQ,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,oBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKT,MAAMD,WAHdU,KAAKT,MAAMmB,MAMjD,oBAAIN,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,uBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKT,MAAME,cAHdO,KAAKT,MAAMoB,MAMjD,oBAAIP,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,mBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKT,MAAMM,UAHdG,KAAKT,MAAMqB,MAMjD,6BACE,+BACE,2CACA,+BAAOZ,KAAKF,mC,GA3EDe,aAAjB1B,EACG2B,aAAe,CACpBxB,KAAM,EACNG,QAAS,EACTI,IAAK,GA+ETH,QAAQqB,IAAI5B,GAcGA,QC1EA6B,MAtBf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,CAAUF,MAAM,gBCIPe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.718f3ab2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { number } from 'prop-types';\r\nimport { Component } from 'react';\r\nimport styles from './feedback.module.css';\r\n\r\nclass Feedback extends Component {\r\n  static defaultProps = {\r\n    Good: 0,\r\n    Neutral: 0,\r\n    Bad: 0,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Good: 0,\r\n      Neutral: 0,\r\n      Bad: 0,\r\n    };\r\n  }\r\n\r\n  onGoodBtnClick = () => {\r\n    this.setState({ Good: this.state.Good + 1 });\r\n  };\r\n  // onGoodBtnClick = () => { //prevState - учитывает предыдущее значение аргумента. Учитывает асинхронность метода setState\r\n  //   this.setState(prevState => {\r\n  //     return ({ value: prevState.value + 1 });\r\n  //   })\r\n  //   console.log('value: ', this.state.value)\r\n  // }\r\n\r\n  onNeutralBtnClick = () => {\r\n    this.setState({ Neutral: this.state.Neutral + 1 });\r\n    console.log(this.state.Neutral);\r\n  };\r\n  onBadBtnClick = () => {\r\n    this.setState({ Bad: this.state.Bad + 1 });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const totalCount = {\r\n      count: this.state.Good + this.state.Neutral + this.state.Bad,\r\n    };\r\n    return totalCount.count;\r\n  };\r\n  // countPositiveFeedbackPercentage = () => {\r\n  //   const positiveResult = { positive: `{${this.state.Good} / ${countTotalFeedback}}` }\r\n  //   console.log(positiveResult);\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h2>{this.props.title}</h2>\r\n          <button onClick={this.onGoodBtnClick}>Good</button>\r\n          <button onClick={this.onNeutralBtnClick}>Neutral</button>\r\n          <button onClick={this.onBadBtnClick}>Bad</button>\r\n        </div>\r\n        <ul className={styles.statsList} key={this.state.Gkey}>\r\n          <li className={styles.statsItem}>\r\n            <span className={styles.statskind}>Good: </span>\r\n            <span className={styles.statsvalue}>{this.state.Good}</span>\r\n          </li>\r\n        </ul>\r\n        <ul className={styles.statsList} key={this.state.Nkey}>\r\n          <li className={styles.statsItem}>\r\n            <span className={styles.statskind}>Neutral: </span>\r\n            <span className={styles.statsvalue}>{this.state.Neutral}</span>\r\n          </li>\r\n        </ul>\r\n        <ul className={styles.statsList} key={this.state.Bkey}>\r\n          <li className={styles.statsItem}>\r\n            <span className={styles.statskind}>Bad: </span>\r\n            <span className={styles.statsvalue}>{this.state.Bad}</span>\r\n          </li>\r\n        </ul>\r\n        <ul>\r\n          <li>\r\n            <span>Total: </span>\r\n            <span>{this.countTotalFeedback()}</span>\r\n          </li>\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconsole.dir(Feedback);\r\n\r\n// function Statistics(props) {\r\n//   const { id, kind, value } = props;\r\n//   return (\r\n//     <ul className={styles.statList} key={id}>\r\n//       <li className={styles.statItem}>\r\n//         <span className={styles.statKind}>{kind}</span>\r\n//         <span className={styles.statValue}>{value}</span>\r\n//       </li>\r\n//     </ul>\r\n//   );\r\n// }\r\n\r\nexport default Feedback;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Feedback from './Feedback/Feedback.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Feedback title=\"Counters\" />\r\n      {/* <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}