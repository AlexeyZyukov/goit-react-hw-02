{"version":3,"sources":["logo.svg","feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Feedback","props","onBtnClick","event","setState","prevState","target","textContent","console","log","state","countTotalFeedback","Good","Neutral","Bad","countPositiveFeedbackPercentage","total","Math","round","this","arrFrmState","Object","keys","title","map","item","type","onClick","className","styles","statsItem","statsKind","statsValue","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,+DCqGAA,E,kDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,WAAa,SAAAC,GACX,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAAMG,OAAOC,YAAcF,EAAUF,EAAMG,OAAOC,aAAe,MAGtEC,QAAQC,IAAR,UACKN,EAAMG,OAAOC,aAChB,EAAKG,MAAMP,EAAMG,OAAOC,eAjBT,EAqBnBI,mBAAqB,WACnB,MAA+B,EAAKD,MACpC,OADA,EAAQE,KAAR,EAAcC,QAAd,EAAuBC,KAtBN,EAyBnBC,gCAAkC,WAChC,IAAQH,EAAS,EAAKF,MAAdE,KACFI,EAAQ,EAAKL,qBACnB,OAAOK,EAAQC,KAAKC,MAAON,EAAOI,EAAS,KAAO,GA1BlD,EAAKN,MAAQ,CACXE,KAAM,EACNC,QAAS,EACTC,IAAK,GALU,E,0CA+BnB,WAAU,IAAD,OACDE,EAAQG,KAAKR,qBACbS,EAAcC,OAAOC,KAAKH,KAAKT,OAGrC,OAFAF,QAAQC,IAAIW,GAGV,eAAC,WAAD,WACE,gCACGD,KAAKlB,MAAMsB,OAAS,6BAAKJ,KAAKlB,MAAMsB,QACpCH,EAAYI,KAAI,SAAAC,GAAI,OACnB,wBACEC,KAAK,SAELC,QAAS,EAAKzB,WACd0B,UAAWH,EAJb,SAMGA,GAJIA,SAQA,IAAVT,EACC,cAAC,WAAD,UACE,+BACGI,EAAYI,KAAI,SAAAC,GAAI,OACnB,cAAC,WAAD,UACE,qBAAIG,UAAWC,IAAOC,UAAtB,UACE,uBAAMF,UAAWC,IAAOE,UAAxB,UAAoCN,EAApC,QACA,sBAAMG,UAAWC,IAAOG,WAAxB,SACG,EAAKtB,MAAMe,SAJHA,MASjB,+BACE,+BACE,2CACA,+BAAOT,OAET,+BACE,uDACA,iCACGG,KAAKJ,kCACN,oDAtBX,8B,GA1DckB,aCURC,MAXf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,CAAUL,MAAM,kBCGPY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7d56ae81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-unused-expressions */\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Component } from 'react';\n\nimport styles from './feedback.module.css';\n\nclass Feedback extends Component {\n  // static defaultProps = {\n  //   Good: 0,\n  //   Neutral: 0,\n  //   Bad: 0,\n  // };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      Good: 0,\n      Neutral: 0,\n      Bad: 0,\n    };\n  }\n\n  onBtnClick = event => {\n    this.setState(prevState => {\n      return {\n        [event.target.textContent]: prevState[event.target.textContent] + 1,\n      };\n    });\n    console.log(\n      `${event.target.textContent}`,\n      this.state[event.target.textContent],\n    );\n  };\n\n  countTotalFeedback = () => {\n    const { Good, Neutral, Bad } = this.state;\n    return Good + Neutral + Bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { Good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((Good / total) * 100) : 0;\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    const arrFrmState = Object.keys(this.state);\n    console.log(arrFrmState);\n\n    return (\n      <Fragment>\n        <div>\n          {this.props.title && <h2>{this.props.title}</h2>}\n          {arrFrmState.map(item => (\n            <button\n              type=\"button\"\n              key={item}\n              onClick={this.onBtnClick}\n              className={item}\n            >\n              {item}\n            </button>\n          ))}\n        </div>\n        {total !== 0 ? (\n          <Fragment>\n            <ul>\n              {arrFrmState.map(item => (\n                <Fragment key={item}>\n                  <li className={styles.statsItem}>\n                    <span className={styles.statsKind}>{item}: </span>\n                    <span className={styles.statsValue}>\n                      {this.state[item]}\n                    </span>\n                  </li>\n                </Fragment>\n              ))}\n              <ul>\n                <li>\n                  <span>Total: </span>\n                  <span>{total}</span>\n                </li>\n                <li>\n                  <span>Positive feedback: </span>\n                  <span>\n                    {this.countPositiveFeedbackPercentage()}\n                    <span> %</span>\n                  </span>\n                </li>\n              </ul>\n            </ul>\n          </Fragment>\n        ) : (\n          `There is no feedback`\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Feedback;\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport Feedback from './feedback/Feedback.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback title=\"Statistics\" />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}