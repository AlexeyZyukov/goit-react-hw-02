{"version":3,"sources":["logo.svg","feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Feedback","totalCount","onGoodBtnClick","event","setState","Good","state","onNeutralBtnClick","Neutral","onBadBtnClick","Bad","countTotalFeedback","countPositivePercentage","positivePercentage","console","log","this","props","title","onClick","className","styles","statsList","statsItem","statskind","statsvalue","Math","round","Component","defaultProps","dir","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,I,wDCITA,E,kDAOJ,aAAe,IAAD,8BACZ,gBAQFC,WAAa,EATC,EAWdC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,KAZ5B,EAuBdE,kBAAoB,WAClB,EAAKH,SAAS,CAAEI,QAAS,EAAKF,MAAME,QAAU,KAxBlC,EA0BdC,cAAgB,WACd,EAAKL,SAAS,CAAEM,IAAK,EAAKJ,MAAMI,IAAM,KA3B1B,EA8BdC,mBAAqB,WAEnB,OADA,EAAKV,WAAa,EAAKK,MAAMD,KAAO,EAAKC,MAAME,QAAU,EAAKF,MAAMI,IAC7D,EAAKT,YAhCA,EAkCdW,wBAA0B,WACxB,IAAIC,EAGJ,OAFAA,EAAsB,EAAKP,MAAMD,KAAO,EAAKJ,WAAc,IAC3Da,QAAQC,IAAIF,GACLA,GApCP,EAAKP,MAAQ,CACXD,KAAM,EACNG,QAAS,EACTE,IAAK,GALK,E,0CAyCd,WACE,OACE,qCACE,gCACE,6BAAKM,KAAKC,MAAMC,QAChB,wBAAQC,QAASH,KAAKd,eAAtB,kBACA,wBAAQiB,QAASH,KAAKT,kBAAtB,qBACA,wBAAQY,QAASH,KAAKP,cAAtB,oBAEF,oBAAIW,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,oBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKV,MAAMD,YAGpD,oBAAIe,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,uBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKV,MAAME,eAGpD,oBAAIY,UAAWC,IAAOC,UAAtB,SACE,qBAAIF,UAAWC,IAAOE,UAAtB,UACE,sBAAMH,UAAWC,IAAOG,UAAxB,mBACA,sBAAMJ,UAAWC,IAAOI,WAAxB,SAAqCT,KAAKV,MAAMI,WAGpD,+BACE,+BACE,2CACA,+BAAOM,KAAKL,0BAEd,+BACE,8CACA,iCACGe,KAAKC,MAAMX,KAAKJ,2BACjB,sD,GApFSgB,aAAjB5B,EACG6B,aAAe,CACpBxB,KAAM,EACNG,QAAS,EACTE,IAAK,GAyFTI,QAAQgB,IAAI9B,GAcGA,QClGA+B,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,CAAUF,MAAM,kBCIPc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1e77c02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { number } from 'prop-types';\nimport { Component } from 'react';\nimport styles from './feedback.module.css';\n\nclass Feedback extends Component {\n  static defaultProps = {\n    Good: 0,\n    Neutral: 0,\n    Bad: 0,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      Good: 0,\n      Neutral: 0,\n      Bad: 0,\n    };\n  }\n\n  totalCount = 0;\n\n  onGoodBtnClick = event => {\n    this.setState({ Good: this.state.Good + 1 });\n    // console.dir(event.currentTarget);\n    // console.log(event.currentTarget.textContent);\n  };\n  // onGoodBtnClick = () => { //prevState - учитывает предыдущее значение аргумента. Учитывает асинхронность метода setState\n  //   this.setState(prevState => {\n  //     return ({ value: prevState.value + 1 });\n  //   })\n  //   console.log('value: ', this.state.value)\n  // }\n\n  onNeutralBtnClick = () => {\n    this.setState({ Neutral: this.state.Neutral + 1 });\n  };\n  onBadBtnClick = () => {\n    this.setState({ Bad: this.state.Bad + 1 });\n  };\n\n  countTotalFeedback = () => {\n    this.totalCount = this.state.Good + this.state.Neutral + this.state.Bad;\n    return this.totalCount;\n  };\n  countPositivePercentage = () => {\n    let positivePercentage = '';\n    positivePercentage = (this.state.Good / this.totalCount) * 100;\n    console.log(positivePercentage);\n    return positivePercentage;\n  };\n\n  render() {\n    return (\n      <>\n        <div>\n          <h2>{this.props.title}</h2>\n          <button onClick={this.onGoodBtnClick}>Good</button>\n          <button onClick={this.onNeutralBtnClick}>Neutral</button>\n          <button onClick={this.onBadBtnClick}>Bad</button>\n        </div>\n        <ul className={styles.statsList}>\n          <li className={styles.statsItem}>\n            <span className={styles.statskind}>Good: </span>\n            <span className={styles.statsvalue}>{this.state.Good}</span>\n          </li>\n        </ul>\n        <ul className={styles.statsList}>\n          <li className={styles.statsItem}>\n            <span className={styles.statskind}>Neutral: </span>\n            <span className={styles.statsvalue}>{this.state.Neutral}</span>\n          </li>\n        </ul>\n        <ul className={styles.statsList}>\n          <li className={styles.statsItem}>\n            <span className={styles.statskind}>Bad: </span>\n            <span className={styles.statsvalue}>{this.state.Bad}</span>\n          </li>\n        </ul>\n        <ul>\n          <li>\n            <span>Total: </span>\n            <span>{this.countTotalFeedback()}</span>\n          </li>\n          <li>\n            <span>Positive: </span>\n            <span>\n              {Math.round(this.countPositivePercentage())}\n              <span> %</span>\n            </span>\n          </li>\n        </ul>\n      </>\n    );\n  }\n}\n\nconsole.dir(Feedback);\n\n// function Statistics(props) {\n//   const { id, kind, value } = props;\n//   return (\n//     <ul className={styles.statList} key={id}>\n//       <li className={styles.statItem}>\n//         <span className={styles.statKind}>{kind}</span>\n//         <span className={styles.statValue}>{value}</span>\n//       </li>\n//     </ul>\n//   );\n// }\n\nexport default Feedback;\n","import logo from './logo.svg';\nimport './App.css';\n\nimport Feedback from './feedback/Feedback.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback title=\"Statistics\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}