{"version":3,"sources":["feedback/feedback.module.css","logo.svg","bugFinder.js","feedback/FeedbackOptions/FeedbackOptions.js","feedback/Notification/notification.js","feedback/Statistics/Statistics.js","feedback/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","style","whiteSpace","toString","componentStack","children","React","Component","FeedbackOptions","arrayFromState","onClickFn","map","item","type","className","onClick","Notification","message","styles","statistic","Statistics","totalFeedback","positiveFeedback","arrayFromStateEntry","statsItem","statsKind","statsValue","Feedback","onBtnClick","event","prevState","target","textContent","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","good","total","Math","round","neutral","bad","wrapper","title","keys","entries","PropsTypes","PropTypes","number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e82d5718.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"feedback_wrapper__2GWpJ\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n// import { Component } from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n    console.log(this.state);\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport styles from '../feedback.module.css';\n\nconst FeedbackOptions = ({ arrayFromState, onClickFn }) => (\n  <div>\n    {arrayFromState.map(item => (\n      <button type=\"button\" className={item} key={item} onClick={onClickFn}>\n        {item}\n      </button>\n    ))}\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../feedback.module.css';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p className={styles.statistic}>{message}</p>\n    </>\n  );\n};\nNotification.propTypes = {\n  message: PropTypes.string,\n};\nexport default Notification;\n","import React from 'react';\nimport { Fragment } from 'react';\nimport Notification from '../Notification/notification';\nimport styles from '../feedback.module.css';\n\nconst Statistics = ({\n  totalFeedback,\n  positiveFeedback,\n  arrayFromStateEntry,\n  message,\n}) => {\n  return (\n    <div>\n      {totalFeedback !== 0 ? (\n        <Fragment>\n          <ul>\n            {arrayFromStateEntry.map(item => (\n              <Fragment key={item[0]}>\n                <li className={styles.statsItem}>\n                  <span className={styles.statsKind}>{item[0]}: </span>\n                  <span className={styles.statsValue}>{item[1]}</span>\n                </li>\n              </Fragment>\n            ))}\n            <ul>\n              <li>\n                <span>Total: </span>\n                <span>{totalFeedback}</span>\n              </li>\n              <li>\n                <span>Positive feedback: </span>\n                <span>\n                  {positiveFeedback}\n                  <span> %</span>\n                </span>\n              </li>\n            </ul>\n          </ul>\n        </Fragment>\n      ) : (\n        <Notification message={message} />\n      )}\n    </div>\n  );\n};\nexport default Statistics;\n","/* eslint-disable no-unused-expressions */\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Component } from 'react';\n\nimport styles from '../feedback.module.css';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\n\nclass Feedback extends Component {\n  static PropsTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  onBtnClick = event => {\n    this.setState(prevState => {\n      return {\n        [event.target.textContent]: prevState[event.target.textContent] + 1,\n      };\n    });\n    console.log(\n      `${event.target.textContent}`,\n      this.state[event.target.textContent],\n    );\n  };\n\n  countTotalFeedback = () => {\n    console.log('Object.values(this.state): ', Object.values(this.state));\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className={styles.wrapper}>\n          {this.props.title && <h2>{this.props.title}</h2>}\n\n          <FeedbackOptions\n            arrayFromState={Object.keys(this.state)}\n            onClickFn={this.onBtnClick}\n          />\n\n          <Statistics\n            totalFeedback={this.countTotalFeedback()}\n            positiveFeedback={this.countPositiveFeedbackPercentage()}\n            arrayFromStateEntry={Object.entries(this.state)}\n            message=\"There is no feedback\"\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Feedback;\n\n// eslint-disable-next-line no-lone-blocks\n{\n  /* {total !== 0 ? (\n          <Fragment>\n            <ul>\n              {arrayState.map(item => (\n                <Fragment key={item}>\n                  <li className={styles.statsItem}>\n                    <span className={styles.statsKind}>{item}: </span>\n                    <span className={styles.statsValue}>{this.state[item]}</span>\n                  </li>\n                </Fragment>\n              ))}\n              <ul>\n                <li>\n                  <span>Total: </span>\n                  <span>{total}</span>\n                </li>\n                <li>\n                  <span>Positive feedback: </span>\n                  <span>\n                    {this.countPositiveFeedbackPercentage()}\n                    <span> %</span>\n                  </span>\n                </li>\n              </ul>\n            </ul>\n          </Fragment>\n        ) : (\n          `There is no feedback`\n        )} */\n}\n","import logo from './logo.svg';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport ErrorBoundary from './bugFinder';\nimport Feedback from './feedback/Feedback/Feedback';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <div className=\"App\">\n        <Feedback title=\"Statistics\" />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nApp.propTypes = {\n  title: PropTypes.string,\n};\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}